Module = [{ ModuleDecl | ";" }]
Code = ( "{" [{ Line }] "}" ) | Line
Line = If | While | DoWhile | For | Code | [ ( "return" Value ) | "break" | Decl | Value ] ";"
If = "if" "(" Value ")" Code [ "else" Code ]
While = "while" "(" Value ")" Code
DoWhile = "do" Code "while" "(" Value ")" ";"
For := "for" "(" [ Decl | Value ] ";" [ Value ] ";" [ Value ] ")" Code

Value = Comma
AssignValue = Assign
Comma = Assign [{ "," Assign }]
Assign = Ternary [ "=" | "+=" | "-=" | "*=" | "/=" | "^=" Assign ]
Ternary = Bool [ "?" Ternary ":" Ternary ]
Bool = Equality [{ "&&" | "||" | "&" | "|" | "^" Equality }]
Equality = Shift [{ "==" | "!=" | ">" | ">=" | "<" | "<=" Shift }]
Shift = Expr [{ ">>" | "<<" Expr }]
Expr = Term [{ "+" | "-" Term }]
Term = Unary [{ "*" | "/" | "%" Unary }]
Unary = ( "!" | "~" | "-" | "*" | "&" Unary ) | Object [{ "++" | "--" }]
Object = Factor [{   ( "[" Value "]" )
                   | ( "(" [ AssignValue [{ "," AssignValue }] ] ")" )
                   | ( "." | "->" <Ident> ) }]
Factor =   ( "(" Value ")" )
         | ( "(" Type ")" Unary )
         | ( "{" [ AssignValue [{ "," AssignValue }] ] "}" )
         | ( "sizeof" ( "(" Type | Value ")" ) | Unary
         | <Int>
         | <Bool>
         | <Str>
         | <Ident>

Type = DeclBasic DeclExpr#
ModuleDecl = DeclBasic   ( DeclExpr#   ( "{" Code "}" )
                                     | ( [{ "," DeclExpr# }] ";" ) )
					   | ";"
Decl = DeclBasic [ DeclExpr# [{ "," DeclExpr# }] ]

Field = Decl
Param = DeclBasic DeclExpr#

DeclBasic = <Ident> | StructOrUnion
StructOrUnion = "struct" | "union" [ Name# ]
                [ "{" [{ Field ";" }] "}" ]

DeclExpr = DeclUnary [ "=" AssignValue ]
DeclUnary = ( "*" DeclUnary ) | DeclObject
DeclObject = DeclAtom [{ DeclFunction | ( "[" Value "]" ) }]
DeclFunction = "(" [ ( Param [{ "," Param }] [ "," "..." ] ) | "..." ]  ")"
TypeAtom = [ ( "(" DeclExpr ")" ) | Name ]
Name = <UnqualifiedIdent>